
// Create tables (called once when the app starts)
db.serialize(() => {
    // Leagues Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Leagues (
            league_id INTEGER PRIMARY KEY AUTOINCREMENT,
            league_name TEXT NOT NULL
        )
    `);

    // Teams Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Teams (
            team_id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_name TEXT NOT NULL,
            logo BLOB,
            league_id INTEGER,
            FOREIGN KEY (league_id) REFERENCES Leagues(league_id)
        )
    `);

    // Matches Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Matches (
            match_id INTEGER PRIMARY KEY AUTOINCREMENT,
            home_team_id INTEGER NOT NULL,
            away_team_id INTEGER NOT NULL,
            league_id INTEGER,
            start_time DATETIME,
            status TEXT CHECK(status IN ('scheduled', 'ongoing', 'completed')),
            FOREIGN KEY (home_team_id) REFERENCES Teams(team_id),
            FOREIGN KEY (away_team_id) REFERENCES Teams(team_id),
            FOREIGN KEY (league_id) REFERENCES Leagues(league_id)
        )
    `);

    // Scores Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Scores (
            score_id INTEGER PRIMARY KEY AUTOINCREMENT,
            match_id INTEGER NOT NULL,
            home_score INTEGER DEFAULT 0,
            away_score INTEGER DEFAULT 0,
            time_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (match_id) REFERENCES Matches(match_id)
        )
    `);

    // Players Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Players (
            player_id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER NOT NULL,
            player_name TEXT NOT NULL,
            position TEXT,
            nationality TEXT,
            age INTEGER,
            jersey_number INTEGER,
            FOREIGN KEY (team_id) REFERENCES Teams(team_id)
        )
    `);

    // Match Events Table
    db.run(`
        CREATE TABLE IF NOT EXISTS MatchEvents (
            event_id INTEGER PRIMARY KEY AUTOINCREMENT,
            match_id INTEGER NOT NULL,
            player_id INTEGER,
            team_id INTEGER,
            event_type TEXT CHECK(event_type IN ('goal', 'yellow_card', 'red_card', 'substitution')),
            event_time INTEGER,
            description TEXT,
            FOREIGN KEY (match_id) REFERENCES Matches(match_id),
            FOREIGN KEY (player_id) REFERENCES Players(player_id),
            FOREIGN KEY (team_id) REFERENCES Teams(team_id)
        )
    `);

    // Substitutions Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Substitutions (
            substitution_id INTEGER PRIMARY KEY AUTOINCREMENT,
            match_id INTEGER NOT NULL,
            team_id INTEGER NOT NULL,
            player_out_id INTEGER NOT NULL,
            player_in_id INTEGER NOT NULL,
            minute INTEGER,
            FOREIGN KEY (match_id) REFERENCES Matches(match_id),
            FOREIGN KEY (team_id) REFERENCES Teams(team_id),
            FOREIGN KEY (player_out_id) REFERENCES Players(player_id),
            FOREIGN KEY (player_in_id) REFERENCES Players(player_id)
        )
    `);

    // Standings Table 
    db.run(`
        CREATE TABLE IF NOT EXISTS Standings (
            standing_id INTEGER PRIMARY KEY AUTOINCREMENT,
            team_id INTEGER NOT NULL,
            league_id INTEGER NOT NULL,
            wins INTEGER DEFAULT 0,
            losses INTEGER DEFAULT 0,
            draws INTEGER DEFAULT 0,
            points INTEGER DEFAULT 0,
            goal_difference INTEGER DEFAULT 0,
            FOREIGN KEY (team_id) REFERENCES Teams(team_id),
            FOREIGN KEY (league_id) REFERENCES Leagues(league_id)
        )
    `);

    // Roles Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Roles (
            role_id INTEGER PRIMARY KEY AUTOINCREMENT,
            role_name TEXT NOT NULL UNIQUE
        )
    `);

    // Users Table
    db.run(`
        CREATE TABLE IF NOT EXISTS Users (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            role_id INTEGER,
            FOREIGN KEY (role_id) REFERENCES Roles(role_id)
        )
    `);

    console.log("Tables created successfully.");
});